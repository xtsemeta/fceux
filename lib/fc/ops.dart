import 'package:flutter/foundation.dart';

//the opsize table is used to quickly grab the instruction sizes (in bytes)
var opsize = Uint8List.fromList([
  1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 3, 3, 0, //0x01
  2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0, //0x10
  3, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0, //0x20
  2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0, //0x30
  1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0, //0x40
  2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0, //0x50
  1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0, //0x60
  2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0, //0x70
  0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 0, 3, 3, 3, 0, //0x80
  2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 0, 3, 0, 0, //0x90
  2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0, //0xA0
  2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0, //0xB0
  2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0, //0xC0
  2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0, //0xD0
  2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0, //0xE0
  2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0 //0xF0
]);

//the optype table is a quick way to grab the addressing mode for any 6502 opcode
//
//  0 = Implied\Accumulator\Immediate\Branch\NULL
//  1 = (Indirect,X)
//  2 = Zero Page
//  3 = Absolute
//  4 = (Indirect),Y
//  5 = Zero Page,X
//  6 = Absolute,Y
//  7 = Absolute,X
//  8 = Zero Page,Y
//
var optype = Uint8List.fromList([
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0x00
  0, 4, 0, 3, 5, 5, 5, 5, 0, 6, 0, 6, 7, 7, 7, 7, //0x10
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0x20
  0, 4, 0, 3, 5, 5, 5, 5, 0, 6, 0, 6, 7, 7, 7, 7, //0x30
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0x40
  0, 4, 0, 3, 5, 5, 5, 5, 0, 6, 0, 6, 7, 7, 7, 7, //0x50
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0x60
  0, 4, 0, 3, 5, 5, 5, 5, 0, 6, 0, 6, 7, 7, 7, 7, //0x70
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0x80
  0, 4, 0, 3, 5, 5, 8, 8, 0, 6, 0, 6, 7, 7, 6, 6, //0x90
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0xA0
  0, 4, 0, 3, 5, 5, 8, 8, 0, 6, 0, 6, 7, 7, 6, 6, //0xB0
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0xC0
  0, 4, 0, 3, 5, 5, 5, 5, 0, 6, 0, 6, 7, 7, 7, 7, //0xD0
  0, 1, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, //0xE0
  0, 4, 0, 3, 5, 5, 5, 5, 0, 6, 0, 6, 7, 7, 7, 7, //0xF0
]);

// the opwrite table aids in predicting the value written for any 6502 opcode
//
//  0 = No value written
//  1 = Write from A
//  2 = Write from X
//  3 = Write from Y
//  4 = Write from P
//  5 = ASL (SLO)
//  6 = LSR (SRE)
//  7 = ROL (RLA)
//  8 = ROR (RRA)
//  9 = INC (ISC)
// 10 = DEC (DCP)
// 11 = (SAX)
// 12 = (AHX)
// 13 = (SHY)
// 14 = (SHX)
// 15 = (TAS)
var opwrite = Uint8List.fromList([
  0, 0, 0, 5, 0, 0, 5, 5, 4, 0, 0, 0, 0, 0, 5, 5, //0x00
  0, 0, 0, 5, 0, 0, 5, 5, 0, 0, 0, 5, 0, 0, 5, 5, //0x10
  0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 7, 7, //0x20
  0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 7, 0, 0, 7, 7, //0x30
  0, 0, 0, 6, 0, 0, 6, 6, 1, 0, 6, 0, 0, 0, 6, 6, //0x40
  0, 0, 0, 6, 0, 0, 6, 6, 0, 0, 0, 6, 0, 0, 6, 6, //0x50
  0, 0, 0, 8, 0, 0, 8, 8, 0, 0, 8, 0, 0, 0, 8, 8, //0x60
  0, 0, 0, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 0, 8, 8, //0x70
  0, 1, 0, 11, 3, 1, 2, 11, 0, 0, 0, 0, 3, 1, 2, 11, //0x80
  0, 1, 0, 12, 3, 1, 2, 11, 0, 1, 0, 15, 13, 1, 14, 12, //0x90
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0xA0
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //0xB0
  0, 0, 0, 10, 0, 0, 10, 10, 10, 0, 0, 0, 0, 0, 10, 10, //0xC0
  0, 0, 0, 10, 0, 0, 10, 10, 10, 0, 0, 10, 0, 0, 10, 10, //0xD0
  0, 0, 0, 9, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 9, 9, //0xE0
  0, 0, 0, 9, 0, 0, 9, 9, 9, 0, 0, 9, 0, 0, 9, 9, //0xF0
]);
